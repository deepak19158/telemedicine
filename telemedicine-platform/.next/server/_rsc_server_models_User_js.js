"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_server_models_User_js";
exports.ids = ["_rsc_server_models_User_js"];
exports.modules = {

/***/ "(rsc)/./server/models/User.js":
/*!*******************************!*\
  !*** ./server/models/User.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nconst bcrypt = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\nconst userSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n        lowercase: true,\n        trim: true\n    },\n    password: {\n        type: String,\n        required: true,\n        minlength: 6\n    },\n    role: {\n        type: String,\n        enum: [\n            \"patient\",\n            \"doctor\",\n            \"agent\",\n            \"admin\"\n        ],\n        required: true\n    },\n    profile: {\n        name: {\n            type: String,\n            required: true,\n            trim: true\n        },\n        phone: {\n            type: String,\n            trim: true\n        },\n        address: {\n            street: String,\n            city: String,\n            state: String,\n            zipCode: String,\n            country: String\n        },\n        // Doctor-specific fields\n        specialization: {\n            type: String,\n            required: function() {\n                return this.role === \"doctor\";\n            }\n        },\n        licenseNumber: {\n            type: String,\n            required: function() {\n                return this.role === \"doctor\";\n            }\n        },\n        // Agent-specific fields\n        agentCode: {\n            type: String,\n            unique: true,\n            sparse: true\n        },\n        referralCode: {\n            type: String,\n            unique: true,\n            sparse: true\n        },\n        // Patient-specific fields\n        assignedDoctor: {\n            type: mongoose.Schema.Types.ObjectId,\n            ref: \"User\"\n        }\n    },\n    isActive: {\n        type: Boolean,\n        default: true\n    },\n    isVerified: {\n        type: Boolean,\n        default: false\n    },\n    // Password reset fields\n    passwordResetToken: {\n        type: String\n    },\n    passwordResetExpires: {\n        type: Date\n    },\n    // Email verification fields\n    emailVerificationToken: {\n        type: String\n    },\n    emailVerificationExpires: {\n        type: Date\n    }\n}, {\n    timestamps: true\n});\n// Index for efficient queries\nuserSchema.index({\n    email: 1\n});\nuserSchema.index({\n    role: 1\n});\nuserSchema.index({\n    \"profile.agentCode\": 1\n});\nuserSchema.index({\n    \"profile.referralCode\": 1\n});\n// Pre-save middleware to hash password\nuserSchema.pre(\"save\", async function(next) {\n    if (!this.isModified(\"password\")) return next();\n    this.password = await bcrypt.hash(this.password, 12);\n    next();\n});\n// Method to check password\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n    return bcrypt.compare(candidatePassword, this.password);\n};\nconst User = mongoose.models.User || mongoose.model(\"User\", userSchema);\nmodule.exports = User;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L3RlbGVtZWRpY2luZS1wbGF0Zm9ybS8uL3NlcnZlci9tb2RlbHMvVXNlci5qcz9lYWQyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKVxuY29uc3QgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0anMnKVxuXG5jb25zdCB1c2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGVtYWlsOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICBsb3dlcmNhc2U6IHRydWUsXG4gICAgdHJpbTogdHJ1ZVxuICB9LFxuICBwYXNzd29yZDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICBtaW5sZW5ndGg6IDZcbiAgfSxcbiAgcm9sZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBlbnVtOiBbJ3BhdGllbnQnLCAnZG9jdG9yJywgJ2FnZW50JywgJ2FkbWluJ10sXG4gICAgcmVxdWlyZWQ6IHRydWVcbiAgfSxcbiAgcHJvZmlsZToge1xuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdHJpbTogdHJ1ZVxuICAgIH0sXG4gICAgcGhvbmU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHRyaW06IHRydWVcbiAgICB9LFxuICAgIGFkZHJlc3M6IHtcbiAgICAgIHN0cmVldDogU3RyaW5nLFxuICAgICAgY2l0eTogU3RyaW5nLFxuICAgICAgc3RhdGU6IFN0cmluZyxcbiAgICAgIHppcENvZGU6IFN0cmluZyxcbiAgICAgIGNvdW50cnk6IFN0cmluZ1xuICAgIH0sXG4gICAgLy8gRG9jdG9yLXNwZWNpZmljIGZpZWxkc1xuICAgIHNwZWNpYWxpemF0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvbGUgPT09ICdkb2N0b3InXG4gICAgICB9XG4gICAgfSxcbiAgICBsaWNlbnNlTnVtYmVyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvbGUgPT09ICdkb2N0b3InXG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBBZ2VudC1zcGVjaWZpYyBmaWVsZHNcbiAgICBhZ2VudENvZGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICAgIHNwYXJzZTogdHJ1ZVxuICAgIH0sXG4gICAgcmVmZXJyYWxDb2RlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB1bmlxdWU6IHRydWUsXG4gICAgICBzcGFyc2U6IHRydWVcbiAgICB9LFxuICAgIC8vIFBhdGllbnQtc3BlY2lmaWMgZmllbGRzXG4gICAgYXNzaWduZWREb2N0b3I6IHtcbiAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgIHJlZjogJ1VzZXInXG4gICAgfVxuICB9LFxuICBpc0FjdGl2ZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBpc1ZlcmlmaWVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICAvLyBQYXNzd29yZCByZXNldCBmaWVsZHNcbiAgcGFzc3dvcmRSZXNldFRva2VuOiB7XG4gICAgdHlwZTogU3RyaW5nXG4gIH0sXG4gIHBhc3N3b3JkUmVzZXRFeHBpcmVzOiB7XG4gICAgdHlwZTogRGF0ZVxuICB9LFxuICAvLyBFbWFpbCB2ZXJpZmljYXRpb24gZmllbGRzXG4gIGVtYWlsVmVyaWZpY2F0aW9uVG9rZW46IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgZW1haWxWZXJpZmljYXRpb25FeHBpcmVzOiB7XG4gICAgdHlwZTogRGF0ZVxuICB9XG59LCB7XG4gIHRpbWVzdGFtcHM6IHRydWVcbn0pXG5cbi8vIEluZGV4IGZvciBlZmZpY2llbnQgcXVlcmllc1xudXNlclNjaGVtYS5pbmRleCh7IGVtYWlsOiAxIH0pXG51c2VyU2NoZW1hLmluZGV4KHsgcm9sZTogMSB9KVxudXNlclNjaGVtYS5pbmRleCh7ICdwcm9maWxlLmFnZW50Q29kZSc6IDEgfSlcbnVzZXJTY2hlbWEuaW5kZXgoeyAncHJvZmlsZS5yZWZlcnJhbENvZGUnOiAxIH0pXG5cbi8vIFByZS1zYXZlIG1pZGRsZXdhcmUgdG8gaGFzaCBwYXNzd29yZFxudXNlclNjaGVtYS5wcmUoJ3NhdmUnLCBhc3luYyBmdW5jdGlvbihuZXh0KSB7XG4gIGlmICghdGhpcy5pc01vZGlmaWVkKCdwYXNzd29yZCcpKSByZXR1cm4gbmV4dCgpXG4gIFxuICB0aGlzLnBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2godGhpcy5wYXNzd29yZCwgMTIpXG4gIG5leHQoKVxufSlcblxuLy8gTWV0aG9kIHRvIGNoZWNrIHBhc3N3b3JkXG51c2VyU2NoZW1hLm1ldGhvZHMuY29tcGFyZVBhc3N3b3JkID0gYXN5bmMgZnVuY3Rpb24oY2FuZGlkYXRlUGFzc3dvcmQpIHtcbiAgcmV0dXJuIGJjcnlwdC5jb21wYXJlKGNhbmRpZGF0ZVBhc3N3b3JkLCB0aGlzLnBhc3N3b3JkKVxufVxuXG5jb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWxzLlVzZXIgfHwgbW9uZ29vc2UubW9kZWwoJ1VzZXInLCB1c2VyU2NoZW1hKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXIiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiYmNyeXB0IiwidXNlclNjaGVtYSIsIlNjaGVtYSIsImVtYWlsIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwidW5pcXVlIiwibG93ZXJjYXNlIiwidHJpbSIsInBhc3N3b3JkIiwibWlubGVuZ3RoIiwicm9sZSIsImVudW0iLCJwcm9maWxlIiwibmFtZSIsInBob25lIiwiYWRkcmVzcyIsInN0cmVldCIsImNpdHkiLCJzdGF0ZSIsInppcENvZGUiLCJjb3VudHJ5Iiwic3BlY2lhbGl6YXRpb24iLCJsaWNlbnNlTnVtYmVyIiwiYWdlbnRDb2RlIiwic3BhcnNlIiwicmVmZXJyYWxDb2RlIiwiYXNzaWduZWREb2N0b3IiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiaXNBY3RpdmUiLCJCb29sZWFuIiwiZGVmYXVsdCIsImlzVmVyaWZpZWQiLCJwYXNzd29yZFJlc2V0VG9rZW4iLCJwYXNzd29yZFJlc2V0RXhwaXJlcyIsIkRhdGUiLCJlbWFpbFZlcmlmaWNhdGlvblRva2VuIiwiZW1haWxWZXJpZmljYXRpb25FeHBpcmVzIiwidGltZXN0YW1wcyIsImluZGV4IiwicHJlIiwibmV4dCIsImlzTW9kaWZpZWQiLCJoYXNoIiwibWV0aG9kcyIsImNvbXBhcmVQYXNzd29yZCIsImNhbmRpZGF0ZVBhc3N3b3JkIiwiY29tcGFyZSIsIlVzZXIiLCJtb2RlbHMiLCJtb2RlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./server/models/User.js\n");

/***/ })

};
;